package com.masthuggis.boki.backend;

import com.masthuggis.boki.backend.callbacks.DBCallback;
import com.masthuggis.boki.backend.callbacks.DBMapCallback;
import com.masthuggis.boki.backend.callbacks.FailureCallback;
import com.masthuggis.boki.backend.callbacks.SuccessCallback;
import com.masthuggis.boki.backend.callbacks.stringCallback;
import com.masthuggis.boki.model.observers.BackendObserver;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Utility class with functionality for Fetching data from Backend in form of a .json-file.
 * The .json-file must be placed in the assets-folder of the application
 */
public class BackendDataHandler implements iBackend {

    /**
     * Singleton that handles all data-fetching from firebase
     * Called from repositories
     */



    /*private boolean isWritingImageToDatabase = false;
    private boolean isWritingAdvertToDatabase = false;*/
    private final List<BackendObserver> backendObservers = new ArrayList<>();
    private final BackendReader backendReader = BackendFactory.createBackendReader(backendObservers);
    private final BackendWriter backendWriter = BackendFactory.createBackendWriter(backendObservers);


    BackendDataHandler() {

    }

    public void addBackendObserver(BackendObserver backendObserver) {
        this.backendObservers.add(backendObserver);
    }

    public void removeBackendObserver(BackendObserver backendObserver) {
        this.backendObservers.remove(backendObserver);
    }


    //Also somehow needs to give the application the userID/AdvertID generated by firebase
    public void writeAdvertToFirebase(File imageFile, Map<String, Object> data) {
        backendWriter.writeAdvertToFirebase(imageFile, data);
    }

    //Gets a list of the ids of the adverts the current user has marked as favourites
    public void getFavouriteIDs(String userID, DBMapCallback dbMapCallback) {
        backendReader.getFavouriteIDs(userID, dbMapCallback);
    }

    public void deleteIDFromFavourites(String id, String favouriteID) {
        backendWriter.deleteIDFromFavourites(id, favouriteID);
    }


    @Override
    public void initialAdvertFetch(DBCallback dbCallback) {
        backendReader.initialAdvertFetch(dbCallback);
    }


    public void attachMarketListener(DBCallback DBCallback) {
        backendReader.attachMarketListener(DBCallback);
    }


    public void getUserChats(String userID, DBCallback DBCallback, FailureCallback failureCallback) {
        backendReader.getUserChats(userID, DBCallback, failureCallback);
    }


    public void createNewChat(String adOwnerID, String otherUserID, String advertID, String imageURL, stringCallback stringCallback) {
        backendWriter.createNewChat(adOwnerID, otherUserID, advertID, imageURL, stringCallback);
    }

    @Override
    public void addAdToFavourites(String adID, String userID) {
        backendWriter.addAdToFavourites(adID, userID);
    }

    @Override
    public void removeAdFromFavourites(String adID, String userID) {
        backendWriter.removeAdFromFavourites(adID, userID);
    }

    @Override
    public void userSignIn(String email, String password, SuccessCallback successCallback, FailureCallback failureCallback) {
        backendWriter.userSignIn(email, password, successCallback, failureCallback);
    }

    public boolean isUserSignedIn() {
        return backendReader.isUserSignedIn();
    }

    public void userSignUpAndSignIn(String email, String password, String username, SuccessCallback successCallback, FailureCallback failureCallback) {
        backendWriter.userSignUpAndSignIn(email, password, username, successCallback, failureCallback);

    }

    @Override
    public void getUserFromID(String userID, DBMapCallback dbMapCallback) {
        backendReader.getUserFromID(userID, dbMapCallback);
    }

    public void getUser(DBMapCallback dbMapCallback) {
        backendReader.getUser(dbMapCallback);
    }

    public void writeMessage(String uniqueChatID, Map<String, Object> messageMap) {
        backendWriter.writeMessage(uniqueChatID, messageMap);
    }


    public void getMessages(String uniqueChatID, DBCallback messageCallback) {
        backendReader.getMessages(uniqueChatID, messageCallback);
    }

    public void setUsername(String username, SuccessCallback successCallback) {
        backendWriter.setUsername(username, successCallback);
    }


    public void signOut() {
        backendWriter.signOut();
    }


    /**
     * Deleting an ad with the specific adID from the database
     */
    public void deleteAd(List<Map<String, String>> chatReceiverAndUserIDMap, Map<String, String> adIDAndUserID) {
        backendWriter.deleteAd(chatReceiverAndUserIDMap, adIDAndUserID);

    }


    @Override
    public void removeChat(String userID, String chatID) {
        backendWriter.removeChat(userID, chatID);
    }


    @Override
    public void updateAdToFirebase(File imageFile, Map<String, Object> dataMap) {
        backendWriter.updateAdToFirebase(imageFile, dataMap);
    }

}